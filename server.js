const express = require('express');
const path = require('path');
const bodyParser = require('body-parser');
const fs = require('fs');
const { exec } = require('child_process');  // To execute Python script

const app = express();
const port = 3000;

// Middleware to parse incoming JSON requests
app.use(bodyParser.json());

// Serve static files (HTML, CSS, JS)
app.use(express.static(path.join(__dirname, 'public')));

// Route to handle the product recommendation request
app.post('/recommend', (req, res) => {
    const { budget, specs } = req.body;

    // Path to your Python script
    const pythonScriptPath = '/Users/akhilsachin/Gemini/test.py';  

    // Command to run Python script with the user inputs (passing budget and specs)
    const pythonCommand = `/Users/akhilsachin/Gemini/env/bin/python ${pythonScriptPath} "${specs}" "${budget}"`;

    // Execute the Python script
    exec(pythonCommand, (error, stdout, stderr) => {
        // If thereâ€™s an error, handle it (log it, send response, etc.)
        if (error) {
            console.error('Error executing Python script:', error.message);
            res.status(500).json({ error: 'Failed to execute Python script' });
            return;
        }

        // Log any standard error output from the Python script
        if (stderr) {
            console.warn('Python script stderr:', stderr);
        }

        // Python script executed successfully, now parse the JSON file
        console.log('Python script output (stdout):', stdout);

        // Read the JSON file containing product data generated by the Python script
        fs.readFile('shopping_results.json', 'utf8', (err, data) => {
            if (err) {
                console.error('Error reading JSON file:', err);
                res.status(500).json({ error: 'Error reading data' });
                return;
            }

            // Parse the JSON data
            const products = JSON.parse(data);

            // Convert specs to lowercase for case-insensitive matching
            const specsLowerCase = specs.toLowerCase();

            // Make the specs match more flexible: check if at least one word matches the title
            const filteredProducts = products.filter(product => {
                const priceNumber = Number(product.extracted_price);
                const titleLowerCase = product.title.toLowerCase();  // Convert title to lowercase for matching
                const specsMatch = specsLowerCase.split(' ').some(spec => titleLowerCase.includes(spec));

                // Check if the price is within the budget and the specs match at least partially
                return priceNumber <= budget && specsMatch;
            });

            // Log the filtered products for debugging purposes
            console.log('Filtered products:', filteredProducts);

            // Send the filtered products as the response
            res.json({ products: filteredProducts });
        });
    });
});
// Start the server
app.listen(port, () => {
    console.log(`Server is running on http://localhost:${port}`);
});
module.exports = app; 